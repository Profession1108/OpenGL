	#include <stdio.h>
    #include<stdlib.h>
    #include<windows.h>
	#include <math.h>
    #include<time.h>
	#include <GL/glut.h>

	#define  PI   3.141592653

	#define Step  0.5

	/*-----Define a unit box--------*/
	/* Vertices of the box */

	float  points[][3] = {{-0.5, 0.2, -0.5},{0.5, 0.2, -0.5}, 
						{0.5, 1.0, -0.5}, {-0.5, 1.0, -0.5}, 
						{-0.5, 0.2, 0.5}, {0.5, 0.2, 0.5},
						{0.5, 1.0, 0.5},  {-0.5, 1.0, 0.5}};
	/* face of box, each face composing of 4 vertices */
	int    face[][4] = {{0, 3, 2, 1}, {0, 1, 5, 4}, {1, 2, 6, 5}, 
					{4, 5, 6, 7}, {2, 3, 7, 6}, {0, 4, 7, 3}};
	float  colors[6][4]={{0.5,0.5,0.5,1.0}, {0.7,0.7,0.7,1.0}, {0.7,0.5,0.5,1.0},
						{0.5,0.5,0.5,1.0}, {0.5,0.7,0.5,1.0}, {0.5,0.5,0.7,1.0}};
	float  colors2[6][4]={{0.6274509803921569,0.3215686274509804,0.1764705882352941,1.0}, {0.803921568627451,0.5215686274509804,0.2470588235294118,1.0}, {0.5450980392156863,0.0,0.0,1.0},
						{0.6274509803921569,0.3215686274509804,0.1764705882352941,1.0}, {0.803921568627451,0.5215686274509804,0.2470588235294118,1.0}, {0.5450980392156863,0.0,0.0,1.0}};
	float  colors3[6][4]={{0.6274509803921569,0.3215686274509804,0.1764705882352941,1.0}, {0.80392156862745, 0.5073170731707317, 0.2235294117647059,1.0}, {0.6274509803921569,0.3215686274509804,0.1764705882352941,1.0},
						{0.6274509803921569,0.3215686274509804,0.1764705882352941,1.0}, {0.80392156862745, 0.5073170731707317, 0.2235294117647059,1.0}, {0.6274509803921569,0.3215686274509804,0.1764705882352941,1.0}};
	float  normals[6][3]={{0.0,0.0,-1.0}, {0.0,-1.0,0.0}, {1.0,0.0,0.0},
                          {0.0,0.0,1.0}, {0.0,1.0,0.0}, {-1.0,0.0,0.0}};
	/* indices of the box faces */
	int    cube[6] = {0, 1, 2, 3, 4, 5};

	/*-Declare GLU quadric objects, sphere, cylinder, and disk --*/
	GLUquadricObj  *sphere=NULL, *cylind=NULL, *disk;


	/*-Declare car position, orientation--*/
	/*self_ang turn self_ang2 self_ang3 swing self_ang4 kneel*/
	float  self_ang=-90.0,self_ang2 = -90.0 ,self_ang3 = -90.0,self_ang4 = -90.0,self_ang5 = -90.0,self_ang6 = -90.0,self_ang7 = -90.0,self_ang8 = -90.0 ,self_ang9 = -90.0,self_ang10 = -90.0,glob_ang = 0.0;
	float  position[7]={35.0, 40.0, 0.0, 10.0, 15.0, 17.5, 21.0};

	/*-----Define window size----*/
	int width=1024, height=768; 
	int type = 0,over = 0,swing = 0,test = 0,into = 0;
	float jump = 0.0,kneel[9] ={0.0},ball_position[4] = {27.5,29.5,38.5,41.5};

	//light//
	int     transfer = 0;
	float   angle = 0.0;
	float   angle2 = 0.0;
	float   exponent = 0.0;
	float   pos_sphere[] = {0.0,0.0};
	float   spot_pos[]={0.0,0.0,0.0};
	float   lt_pos[]={12.0, 25.0, 20.0, 1.0};
	float   spot_dir[]={1.0,0.0,0.0};
	float   lt_diffuse[]={0.9, 0.9, 0.9, 1.0};
	float   lt_specular[]={0.9, 0.9, 0.9, 1.0};
	float   global_ambient[]={0.2, 0.2, 0.2, 1.0};
	float   R = 1.0, G = 1.0 , B = 1.0;
	float   R2 = 1.0, G2 = 1.0 , B2 = 1.0;
	float   lt_diffuse2[]={1.0, 1.0, 1.0, 1.0};
	float   lt_specular2[]={1.0, 1.0, 1.0, 1.0};
	float   global_ambient2[]={1.0, 1.0, 1.0, 1.0};
	float   head=0.0, roll=0.0, Epitch=0.0;

	float  mat_specular[] ={1.0, 0.0, 0.0, 1.0};
	float  mat_ambient[] = {0.3, 0.3, 0.3, 1.0};
    float  mat_diffuse[] = {0.3, 0.3 ,1.0, 1.0};
    float  mat_shininess = 1.0;


	void setup_light2()
	{
		glEnable(GL_LIGHT0);
		glLightfv(GL_LIGHT0, GL_POSITION, lt_pos);
		glLightfv(GL_LIGHT0, GL_DIFFUSE, lt_diffuse);
		glLightfv(GL_LIGHT0, GL_SPECULAR, lt_specular);
		glLightModelfv(GL_LIGHT_MODEL_AMBIENT, global_ambient);
		glLightf(GL_LIGHT0, GL_SPOT_CUTOFF,angle);
		glLightfv(GL_LIGHT0, GL_SPOT_DIRECTION,spot_dir);
		glLightf(GL_LIGHT0, GL_SPOT_EXPONENT,exponent);
		glLightf(GL_LIGHT0, GL_CONSTANT_ATTENUATION,1);
		glLightf(GL_LIGHT0, GL_LINEAR_ATTENUATION,0);
		glLightf(GL_LIGHT0, GL_QUADRATIC_ATTENUATION,0);
	}
	void setup_light()
	{
		if(transfer == 1)
		{
		glEnable(GL_LIGHT0);
		glLightfv(GL_LIGHT0, GL_POSITION, lt_pos);
		glLightfv(GL_LIGHT0, GL_DIFFUSE, lt_diffuse);
		glLightfv(GL_LIGHT0, GL_SPECULAR, lt_specular);
		glLightModelfv(GL_LIGHT_MODEL_AMBIENT, global_ambient);
		glLightf(GL_LIGHT0, GL_CONSTANT_ATTENUATION,1);
		glLightf(GL_LIGHT0, GL_LINEAR_ATTENUATION,0);
		glLightf(GL_LIGHT0, GL_QUADRATIC_ATTENUATION,0);
		}else
		{
		glEnable(GL_LIGHT0);
		glLightfv(GL_LIGHT0, GL_POSITION, lt_pos);
		glLightfv(GL_LIGHT0, GL_DIFFUSE, lt_diffuse);
		glLightfv(GL_LIGHT0, GL_SPECULAR, lt_specular);
		glLightModelfv(GL_LIGHT_MODEL_AMBIENT, global_ambient);
		if(transfer == 3)
		{
			glLightf(GL_LIGHT0, GL_SPOT_CUTOFF,angle2);
		}
		glLightfv(GL_LIGHT0, GL_SPOT_DIRECTION,spot_dir);
		glLightf(GL_LIGHT0, GL_SPOT_EXPONENT,exponent);
		glLightf(GL_LIGHT0, GL_CONSTANT_ATTENUATION,1);
		glLightf(GL_LIGHT0, GL_LINEAR_ATTENUATION,0);
		glLightf(GL_LIGHT0, GL_QUADRATIC_ATTENUATION,0);
		}
	}

	static void Timer7(int value){
		if(self_ang7 >= -90.0)
		{
			goto stop; 
		}
		type = 5;
		into = 1;
		if(position[3] <= 39.4 && position[3] >= -17.9 && position[4] >= -26.4 && position[4] <=-9.5 )
		{
			kneel[0] = 0;
			kneel[1] = 0;
			self_ang7 = -90.0;
			position[3] -= 5*cos(self_ang*PI/180.0);
			position[4] += 5*sin(self_ang*PI/180.0);
			goto stop; 
		}else{
			kneel[0] += 0.275;
			kneel[1] -= 0.2;
			self_ang7 += 10.0;
			position[3] += 3*cos(self_ang*PI/180.0);
			position[4] -= 3*sin(self_ang*PI/180.0);
		}
		glutPostRedisplay();
		// 100 milliseconds
		glutTimerFunc(100, Timer7, 0);
        stop:;
	}

	static void Timer6(int value){
		if(self_ang7 <= -120.0)
		{
			glutTimerFunc(100, Timer7, 0);
			goto stop; 
		}
		type = 5;
		if(position[3] <= 39.4 && position[3] >= -17.9 && position[4] >= -26.4 && position[4] <=-9.5 )
		{
			kneel[0] = 0;
			kneel[1] = 0;
			self_ang7 = -90.0;
			goto stop; 
		}else{
			kneel[0] -= 0.275;
			kneel[1] += 0.2;
			self_ang7 -= 10.0;
		}
		glutPostRedisplay();
		// 100 milliseconds
		glutTimerFunc(100, Timer6, 0);
        stop:;
	}

	static void Timer5(int value){
		if(self_ang7 >= -60.0)
		{
			glutTimerFunc(100, Timer6, 0);
			goto stop; 
		}
		type = 5;
		if(position[3] <= 39.4 && position[3] >= -17.9 && position[4] >= -26.4 && position[4] <=-9.5 )
		{
			kneel[0] = 0.0;
			kneel[1] = 0.0;
			self_ang7 = -90.0;
			position[3] -= 5*cos(self_ang*PI/180.0);
			position[4] += 5*sin(self_ang*PI/180.0);
			goto stop; 
		}else{
			kneel[0] += 0.275;
			kneel[1] -= 0.2;
			self_ang7 += 10.0;
			position[3] += 3*cos(self_ang*PI/180.0);
			position[4] -= 3*sin(self_ang*PI/180.0);
		}
		glutPostRedisplay();
		// 100 milliseconds
		glutTimerFunc(100, Timer5, 0);
        stop:;
	}

	static void Timer4(int value){
		if(kneel[0] <= 0.0)
		{
			goto stop; 
		}
		type = 2;
		kneel[0] -= 0.275;
		kneel[1] += 0.2;
		self_ang4 -= 3.2;
		glutPostRedisplay();
		// 100 milliseconds
		glutTimerFunc(50, Timer4, 0);
        stop:;
	}

	static void Timer3(int value){
		if(kneel[0] >= 2.0)
		{
			glutTimerFunc(50, Timer4, 0);
			goto stop; 
		}
		type = 2;
		kneel[0] += 0.275;
		kneel[1] -= 0.2;
		self_ang4 += 3.2;
		glutPostRedisplay();
		// 100 milliseconds
		glutTimerFunc(50, Timer3, 0);
        stop:;
	}

	static void Timer2(int value){
		if(jump <= 0.0)
		{
			goto stop; 
		}
		jump -= 1.0;
		glutPostRedisplay();
		// 100 milliseconds
		glutTimerFunc(50, Timer2, 0);
        stop:;
	}

	static void Timer(int value){
		if(jump >= 10.0)
		{
			glutTimerFunc(50, Timer2, 0);
			goto stop; 
		}
		jump += 1.0;
		glutPostRedisplay();
		// 100 milliseconds
		glutTimerFunc(50, Timer, 0);
        stop:;
	}
	
	/*----------------------------------------------------------
	* Procedure to initialize the working environment.
	*/
	void  myinit()
	{
	glClearColor(0.0, 0.0, 0.0, 1.0);      /*set the background color BLACK */
                   
	glClear(GL_COLOR_BUFFER_BIT| GL_DEPTH_BUFFER_BIT); /*Clear the Depth & Color Buffers */

	glEnable(GL_DEPTH_TEST);
	/*---Create quadratic objects---*/
	if(sphere==NULL){
	sphere = gluNewQuadric();
	gluQuadricDrawStyle(sphere, GLU_FILL);
	gluQuadricNormals(sphere, GLU_SMOOTH);
	}
	if(cylind==NULL){
	cylind = gluNewQuadric();
	gluQuadricDrawStyle(cylind, GLU_FILL);
	gluQuadricNormals(cylind, GLU_SMOOTH);
	}
	if(disk==NULL){
	disk = gluNewQuadric();
	gluQuadricDrawStyle(disk, GLU_FILL);
	gluQuadricNormals(disk, GLU_SMOOTH);
	}
	
	//light//
	/*---Create a light source----*/
	glEnable(GL_LIGHTING);
	glLightModeli(GL_LIGHT_MODEL_LOCAL_VIEWER, GL_TRUE);
	/*---Enable normalization of normals----*/
	glEnable(GL_NORMALIZE);
	setup_light();
	}

	void draw_pointphere()
	{
		float yellow[]={5.0, 50.0, 110.0, 1.0};
		float sphere_emission[] = {1.0,1.0,1.0,1.0};
		float sphere_emission2[] = {0.0,0.0,0.0,1.0};
		float   lt_diffus[]={0.9, 0.9, 0.9, 1.0};
	    float   lt_specula[]={0.9, 0.9, 0.9, 1.0};
	    float   global_ambien[]={0.2, 0.2, 0.2, 1.0};

		glPushMatrix();
		glTranslatef(15.0 , 25.0 , 50.0);
		glMaterialfv(GL_FRONT, GL_EMISSION, lt_diffuse);
		glColor3f(1.0,1.0,0.0);
		glScalef(2.0, 2.0, 2.0);
		gluSphere(sphere,1.4,50.0,15.0);
		glPopMatrix();
		glMaterialfv(GL_FRONT, GL_EMISSION, sphere_emission2);
	}

	void draw_spotphere()
	{
		float yellow[]={5.0, 50.0, 110.0, 1.0};
		float sphere_emission[] = {1.0,1.0,1.0,1.0};
		float sphere_emission2[] = {0.0,0.0,0.0,1.0};
		float   lt_diffus[]={0.9, 0.9, 0.9, 1.0};
	    float   lt_specula[]={0.9, 0.9, 0.9, 1.0};
	    float   global_ambien[]={0.2, 0.2, 0.2, 1.0};

		glPushMatrix();
		glTranslatef(position[3]+pos_sphere[0], 35.0, position[4]+pos_sphere[1]);
		glMaterialfv(GL_FRONT, GL_EMISSION, lt_diffuse);
		glColor3f(1.0,1.0,0.0);
		glScalef(2.0, 2.0, 2.0);
		gluSphere(sphere,1.4,50.0,15.0);
		glPopMatrix();
		glMaterialfv(GL_FRONT, GL_EMISSION, sphere_emission2);
	}
	/*--------------------------------------------------------
	* Procedure to draw a 1x1x1 cube. The cube is within
	* (-0.5,-0.5,-0.5) ~ (0.5,0.5,0.5)
	*/
	void draw_cube()
	{
    int    i = 0;
	for(i=0;i<6;i++){  
		glEnable(GL_COLOR_MATERIAL);
		glColorMaterial(GL_FRONT, GL_SPECULAR);
		glColor3fv(colors[i]);
		glMaterialf(GL_FRONT, GL_SHININESS, 8.0);
		glColorMaterial(GL_FRONT, GL_AMBIENT_AND_DIFFUSE);
		glColor3fv(colors[i]);/* Set color */
		glNormal3fv(normals[i]);
	    glBegin(GL_POLYGON);  /* Draw the face */
		glVertex3fv(points[face[i][0]]);
		glVertex3fv(points[face[i][1]]);
		glVertex3fv(points[face[i][2]]);
		glVertex3fv(points[face[i][3]]);
	glEnd();
	}
	}

	/*---------------------------------------------------------
	* Procedure to draw the floor.
	*/
	void draw_floor()
	{
    int  i = 0, j = 0;

    glEnable(GL_COLOR_MATERIAL);
    glColorMaterial(GL_FRONT, GL_AMBIENT_AND_DIFFUSE);
    glNormal3f(0.0, 1.0, 0.0);

	for(i=0;i<10;i++)
	for(j=0;j<10;j++){
		if((i+j)%2==0) glColor3f(1.0, 0.8, 0.8);
		else glColor3f(0.1, 0.1, 0.7);
		glBegin(GL_POLYGON);
		glVertex3f((i-4.0)*12.0, -10.5, (j-5.0)*10.0); /*右上*/
		glVertex3f((i-4.0)*12.0, -10.5, (j-4.0)*10.0); /*右下*/
		glVertex3f((i-5.0)*12.0, -10.5, (j-4.0)*10.0); /*左下*/
		glVertex3f((i-5.0)*12.0, -10.5, (j-5.0)*10.0); /*左上*/
		glEnd();
	}
	glDisable(GL_COLOR_MATERIAL);
	}

	/*-------------------------------------------------------
	* Procedure to draw three obstacles and the orign
	*/
	void draw_cube2()
	{
    int    i = 0;

	for(i=0;i<6;i++){    
		glEnable(GL_COLOR_MATERIAL);
		glColorMaterial(GL_FRONT, GL_SPECULAR);
		glColor3fv(colors2[i]);
		glMaterialf(GL_FRONT, GL_SHININESS, 6.0);
		glColorMaterial(GL_FRONT, GL_AMBIENT_AND_DIFFUSE);
		glColor3fv(colors2[i]);/* Set color */
		glNormal3fv(normals[i]);
	    glBegin(GL_POLYGON);  /* Draw the face */
		glVertex3fv(points[face[i][0]]);
		glVertex3fv(points[face[i][1]]);
		glVertex3fv(points[face[i][2]]);
		glVertex3fv(points[face[i][3]]);
	glEnd();
	}
	}

	void draw_cube3()
	{
    int    i = 0;

	for(i=0;i<6;i++){ 
		glEnable(GL_COLOR_MATERIAL);
		glColorMaterial(GL_FRONT, GL_SPECULAR);
		glColor3fv(colors3[i]);
		glMaterialf(GL_FRONT, GL_SHININESS, 6.0);
		glColorMaterial(GL_FRONT, GL_AMBIENT_AND_DIFFUSE);
		glColor3fv(colors3[i]);/* Set color */
		glNormal3fv(normals[i]);
	    glBegin(GL_POLYGON);  /* Draw the face */
		glVertex3fv(points[face[i][0]]);
		glVertex3fv(points[face[i][1]]);
		glVertex3fv(points[face[i][2]]);
		glVertex3fv(points[face[i][3]]);
	glEnd();
	}
	}

	void draw_sphere()
	{
		float white[]={R, G, B, 1.0};
		float white2[]={R2, G2, B2, 1.0};
		glPushMatrix();
		glColor3f(1.0,1.0,1.0);
		glTranslatef(position[0], 3.5 ,position[1]);
		glScalef(2.0, 2.0, 2.0);
		glMaterialf(GL_FRONT, GL_SHININESS, mat_shininess);
        glMaterialfv(GL_FRONT, GL_SPECULAR, white2);
        glEnable(GL_COLOR_MATERIAL);
        glColorMaterial(GL_FRONT, GL_AMBIENT_AND_DIFFUSE);
        glColor3fv(white);
		gluSphere(sphere,1.4,50.0,15.0);
		glPopMatrix();
	}
	void draw_obstacles()
	{
		float white[]={1.0, 1.0, 1.0, 1.0};

		glPushMatrix();
		glTranslatef(10.0, -8.5 ,-20.0);
		glScalef(40.0, 30.0, 10.0);
		draw_cube2();        
		glPopMatrix();

		glPushMatrix();
		glColor3f(1.0,1.0,1.0);
		glTranslatef(position[0], 3.5 ,position[1]);
		glScalef(2.0, 2.0, 2.0);
		glMaterialf(GL_FRONT, GL_SHININESS, 8);
        glMaterialfv(GL_FRONT, GL_SPECULAR, white);
        glEnable(GL_COLOR_MATERIAL);
        glColorMaterial(GL_FRONT, GL_AMBIENT_AND_DIFFUSE);
        glColor3fv(white);
		gluSphere(sphere,1.4,50.0,15.0);
		glPopMatrix();
	}

	void mouse(int button,int state,int x,int y)
	{
		switch(button){
		case GLUT_LEFT_BUTTON:
			if(state==GLUT_DOWN)
			{
				fprintf(stderr,"left button is pressed, cursor is at <%d,%d>\n", x, y);
			}
			break;
		default:
			break;
		}
	}
	/*-------------------------------------------------------
	* Display callback func. This func. draws three
	* cubes at proper places to simulate a solar system.
	*/
	void display()
	{
	static float  ang_self=0.0;
	static float  angle=0.0;

	/*Clear previous frame and the depth buffer */
	glClear(GL_COLOR_BUFFER_BIT| GL_DEPTH_BUFFER_BIT);
	/*----Define the current eye position and the eye-coordinate system---*/
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	gluLookAt(8.0, 5.0, 15.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);
	
	    draw_pointphere();
	    glRotatef(head, 0.0, 1.0, 0.0);    /*--Transformation in Eye coord. sys--*/
        glRotatef(roll, 0.0, 0.0, 1.0);
        glRotatef(Epitch, 1.0, 0.0, 0.0); 

	    draw_spotphere();		
		draw_floor();
		draw_obstacles();

		glPushMatrix();
		glTranslatef(position[3] - 20.0, 0.0 ,position[4] - 35.0);
		draw_sphere();
		glPopMatrix();
	/*-------Draw the robot head----*/
		glPushMatrix();
		glTranslatef(position[3], kneel[1]+jump+20.0,position[4]);
		glRotatef(self_ang, 0.0, 1.0, 0.0);
		glTranslatef(0.0, -14.0 , 0.0 );
		glRotatef(self_ang8+90.0, 0.0, 0.0, -1.0);
		glTranslatef(0.0, 14.0 , 0.0 );
		glTranslatef(0.0, -14.0 , 0.0 );
		glRotatef(self_ang10+90.0, 0.0, 1.0, 0.0);
		glTranslatef(0.0, 14.0 , 0.0 );
		glScalef(8.0, 5.0, 7.0);    
		draw_cube();
		glPushMatrix();
		glTranslatef(0.0, 0.9 , 0.0 );
		glScalef(0.5, 0.8, 0.8);    
		draw_cube3();
		glPopMatrix(); 
		glPushMatrix();
		glTranslatef(0.0, 1.05 , 0.0 );
		glColor3f(0.8235294117647059, 0.4117647058823529, 0.1176470588235294);
		glRotatef(-90.0, 1.0, 0.0, 0.0);
		glScalef(0.5, 0.6, 0.2); 
		gluDisk(disk,0,2,14,14);
		glPopMatrix(); 
		glPushMatrix();
		glColor3f(1.0,1.0,1.0);
		glTranslatef(0.55, 0.7, 0.175 );
		glRotatef(-90.0, 0.0, 1.0, 0.0);
		glScalef(0.05, 0.1, 0.1); 
		gluDisk(disk,0,2,14,14);
		glPopMatrix();
		glPushMatrix();
		glColor3f(1.0,1.0,1.0);
		glTranslatef(0.55, 0.7, -0.175 );
		glRotatef(-90.0, 0.0, 1.0, 0.0);
		glScalef(0.05, 0.1, 0.1); 
		gluDisk(disk,0,2,14,14);
		glPopMatrix(); 
		glPopMatrix(); 

	/*-------Draw the robot body----*/
		glPushMatrix();
		glTranslatef(position[3], kneel[1]+jump+20.0,position[4]);
		glRotatef(self_ang, 0.0, 1.0, 0.0);
		glTranslatef(0.0, -14.0 , 0.0 );
		glRotatef(self_ang8+90.0, 0.0, 0.0, -1.0);
		glScalef(10.0, 15.0, 10.0);    
		draw_cube();
		glPopMatrix();

	/*-------Draw the right hand----*/
		glPushMatrix();
		glColor3f(1.0, 0.0, 0.0);
		glTranslatef(position[3], kneel[1]+jump+20.0, position[4]);
		glRotatef(self_ang, 0.0, 1.0, 0.0);
		glTranslatef(0.0, 0.0 , -6.5 );
		glRotatef(self_ang2 + 90.0, 0.0, 0.0, 1.0);
		glTranslatef(0.0, -14.0 , 0.0 );
		glRotatef(self_ang8+90.0, 0.0, 0.0, -1.0);
		glTranslatef(0.0, 14.0 , 0.0 );
		gluSphere(sphere,1.4,50.0,15.0);
		glPopMatrix();

		glPushMatrix();
	    glTranslatef(position[3], kneel[1]+jump+20.0, position[4]);
		glRotatef(self_ang, 0.0, 1.0, 0.0);
		glTranslatef(0.0, -7.0 , -6.5);
		glTranslatef(0.0,  7.0 , 0.0);
		glRotatef(self_ang2 + 90.0, 0.0, 0.0, 1.0);		
		glTranslatef(0.0, -7.0 , 0.0);
		glTranslatef( 0.0,-7.0 , 0.0 );
		glRotatef(self_ang8+90.0, 0.0, 0.0, -1.0);
		glTranslatef( 0.0, 7.0 , 0.0 );
		glScalef(2.0, 6.0, 2.0); 
	    draw_cube();				
	    glPopMatrix();

		glPushMatrix();
		glColor3f(1.0, 0.0, 0.0);
		glTranslatef(position[3], kneel[1]+jump+20.0, position[4]);
		glRotatef(self_ang,0.0, 1.0, 0.0);
		glTranslatef(0.0, -6.5 , -6.5);
		glTranslatef(0.0, +6.5, 0.0);
		glRotatef(self_ang2, 0.0, 0.0, 1.0);	
		glTranslatef(6.5, 0.0 , 0.0);
		glTranslatef(7.5, 0.0 , 0.0 );
		glRotatef(self_ang8+90.0, 0.0, 0.0, -1.0);
		glTranslatef(-7.5, 0.0 , 0.0 );
		gluSphere(sphere,1.2,50.0,15.0);
		glPopMatrix();	

		glPushMatrix();
		glTranslatef(position[3], kneel[1]+jump+20.0, position[4]);
		glRotatef(self_ang, 0.0, 1.0, 0.0);
		glTranslatef(0.0, -10.5 , -6.5);
		glTranslatef(0.0, 10.5 , -6.5);
		glRotatef(self_ang2 + 90.0, 0.0,0.0, 1.0);	
		glTranslatef(0.0, -10.5 , 6.5);
		glTranslatef(0.0, 4.25 , -6.5);
		glRotatef(self_ang3 + 90.0, 0.0, 0.0, 1.0);	
		glTranslatef(0.0, -4.25 , 6.5);
		glTranslatef(0.0, 4.25 , 0.0);
		glRotatef(self_ang6 - 270.0, 1.0, 0.0, 0.0);	
		glTranslatef(0.0, -4.25 , 0.0);
		glTranslatef(0.0, -3.25 , 0.0 );
		glRotatef(self_ang8+90.0, 0.0, 0.0, -1.0);
		glTranslatef(0.0, 3.25 , 0.0 );
		glScalef(1.0, 3.5, 1.0);    		
		draw_cube();
		glPopMatrix();

		glPushMatrix();
		glColor3f(1.0, 0.0, 0.0);
		glTranslatef(position[3], kneel[1]+jump+20.0, position[4]);
		glRotatef(self_ang, 0.0, 1.0, 0.0);
		glTranslatef(0.0, -10.75 , -6.5);
		glTranslatef(0.0, 10.75 , -6.5);
		glRotatef(self_ang2 + 90.0, 0.0, 0.0, 1.0);	
		glTranslatef(0.0, -10.75 , 6.5);
		glTranslatef(0.0, 4.50 , -6.5);
		glRotatef(self_ang3 + 90.0, 0.0, 0.0, 1.0);	
		glTranslatef(0.0, -4.50 , 6.5);		
		glTranslatef(0.0, 4.50 , 0.0);
		glRotatef(self_ang6 - 270.0 , 1.0, 0.0, 0.0);	
		glTranslatef(0.0, -4.0 , 0.0);
		glTranslatef(0.0, -3.5 , 0.0 );
		glRotatef(self_ang8+90.0, 0.0, 0.0, -1.0);
		glTranslatef(0.0, 3.5 , 0.0 );
		gluSphere(sphere,0.9,50.0,15.0);
		glPopMatrix();
	  
	/*-------Draw the left hand----*/
		glPushMatrix();
		glColor3f(1.0, 0.0, 0.0);
		glTranslatef(position[3], kneel[1]+jump+20.0, position[4]);
		glRotatef(self_ang, 0.0, 1.0, 0.0);
		glTranslatef(0.0, 0.0 , 6.5 );
		glRotatef(self_ang2 + 90.0, 0.0, 0.0, 1.0);
		glTranslatef(0.0, -14.0 , 0.0 );
		glRotatef(self_ang8+90.0, 0.0, 0.0, -1.0);
		glTranslatef(0.0, 14.0 , 0.0 );
		gluSphere(sphere,1.4,50.0,15.0);
		glPopMatrix();

		glPushMatrix();
	    glTranslatef(position[3], kneel[1]+jump+20.0, position[4]);
		glRotatef(self_ang, 0.0, 1.0, 0.0);
		glTranslatef(0.0, -7.0 , 6.5);
		glTranslatef(0.0,  7.0 , 0.0);
		glRotatef(self_ang2 + 90.0, 0.0, 0.0, 1.0);		
		glTranslatef(0.0, -7.0 , 0.0);
		glTranslatef( 0.0,-7.0 , 0.0 );
		glRotatef(self_ang8+90.0, 0.0, 0.0, -1.0);
		glTranslatef( 0.0, 7.0 , 0.0 );
		glScalef(2.0, 6.0, 2.0); 
	    draw_cube();				
	    glPopMatrix();

		glPushMatrix();
		glColor3f(1.0, 0.0, 0.0);
		glTranslatef(position[3], kneel[1]+jump+20.0, position[4]);
		glRotatef(self_ang,0.0, 1.0, 0.0);
		glTranslatef(0.0, -6.5 , 6.5);
		glTranslatef(0.0, +6.5, 0.0);
		glRotatef(self_ang2, 0.0, 0.0, 1.0);	
		glTranslatef(6.5, 0.0 , 0.0);
		glTranslatef(7.5, 0.0 , 0.0 );
		glRotatef(self_ang8+90.0, 0.0, 0.0, -1.0);
		glTranslatef(-7.5, 0.0 , 0.0 );
		gluSphere(sphere,1.2,50.0,15.0);
		glPopMatrix();	

		glPushMatrix();
		glTranslatef(position[3], kneel[1]+jump+20.0, position[4]);
		glRotatef(self_ang, 0.0, 1.0, 0.0);
		glTranslatef(0.0, -10.5 , 6.5);
		glTranslatef(0.0, 10.5 , -6.5);
		glRotatef(self_ang2 + 90.0, 0.0,0.0, 1.0);	
		glTranslatef(0.0, -10.5 , 6.5);
		glTranslatef(0.0, 4.25 , -6.5);
		glRotatef(self_ang5 + 90.0, 0.0, 0.0, -1.0);	
		glTranslatef(0.0, -4.25 , 6.5);
		glTranslatef(0.0, 4.25 , 0.0);
		glRotatef(self_ang6 - 270.0, -1.0, 0.0, 0.0);	
		glTranslatef(0.0, -4.25 , 0.0);
		glTranslatef(0.0, -3.25 , 0.0 );
		glRotatef(self_ang8+90.0, 0.0, 0.0, -1.0);
		glTranslatef(0.0, 3.25 , 0.0 );
		glScalef(1.0, 3.5, 1.0);    		
		draw_cube();
		glPopMatrix();

		glPushMatrix();
		glColor3f(1.0, 0.0, 0.0);
		glTranslatef(position[3], kneel[1]+jump+20.0, position[4]);
		glRotatef(self_ang, 0.0, 1.0, 0.0);
		glTranslatef(0.0, -10.75 , 6.5);
		glTranslatef(0.0, 10.75 , -6.5);
		glRotatef(self_ang2 + 90.0, 0.0, 0.0, 1.0);	
		glTranslatef(0.0, -10.75 , 6.5);
		glTranslatef(0.0, 4.50 , -6.5);
		glRotatef(self_ang5 + 90.0, 0.0, 0.0, -1.0);	
		glTranslatef(0.0, -4.50 , 6.5);		
		glTranslatef(0.0, 4.50 , 0.0);
		glRotatef(self_ang6 - 270.0 , -1.0, 0.0, 0.0);	
		glTranslatef(0.0, -4.0 , 0.0);
		glTranslatef(0.0, -3.5 , 0.0 );
		glRotatef(self_ang8+90.0, 0.0, 0.0, -1.0);
		glTranslatef(0.0, 3.5 , 0.0 );
		gluSphere(sphere,0.9,50.0,15.0);
		glPopMatrix();

		/*-------Draw the right leg----*/
		glPushMatrix();
		glTranslatef(position[3]+2.0, kneel[1]+jump+3.0, position[4]);
		glRotatef(-self_ang+180.0, 0.0, -1.0, 0.0);
        glTranslatef(0.0, +7.0, 0.0);
		glRotatef(self_ang4 - 90.0, 0.0, 0.0, -1.0);
		glTranslatef(0.0, 0.0, 0.0);
        glTranslatef(0.0, -1.0, 0.0);
		glRotatef(self_ang7+90.0, 0.0, 0.0, -1.0);
		glTranslatef(0.0,1.0 ,0.0);
        glScalef(3.0, 6.0, 3.0);  
		draw_cube();
		glPopMatrix(); 
		
		glPushMatrix();
		glColor3f(1.0, 0.0, 0.0);
		glTranslatef(position[3]+2.0, kneel[1]+jump+3.0, position[4]);
		glRotatef(-self_ang+180.0, 0.0, -1.0, 0.0);
		glTranslatef( 0.0 ,7.0 ,0.0);
		glRotatef(self_ang4 - 90.0, 0.0, 0.0, -1.0);
		glTranslatef( 0.0 , 7.0 ,0.0);
		glTranslatef( 0.0 , -7.0 ,0.0);
		glRotatef(self_ang7+90.0, 0.0, 0.0, -1.0);
		glTranslatef( 0.0, 7.0 ,0.0);
		gluSphere(sphere,1.2,50.0,15.0);
		glPopMatrix();
		
		glPushMatrix();
		glTranslatef(position[3]+2.0, jump-1.75, kneel[0]+position[4]);
		glRotatef(-self_ang+180.0, 0.0, -1.0, 0.0);
		glTranslatef(0.0, +4.75, 0.0);
		glRotatef(self_ang4 -90.0, 0.0, 0.0, 1.0);
        glTranslatef(kneel[0], 0.0, 0.0);
		glTranslatef(0.0, -7.0, 0.0);
		glRotatef(self_ang7+90.0, 0.0, 0.0, -1.0);
		glTranslatef(0.0, 7.0 ,0.0);
		glScalef(2.0, 4.0, 2.0);    
		draw_cube();
		glPopMatrix();  
		
		glPushMatrix();
		glColor3f(1.0, 0.0, 0.0);
		glTranslatef(position[3]+2.0, jump-1.65, position[4]);
		glRotatef(-self_ang+180.0, 0.0, -1.0, 0.0);
		glTranslatef(0.0, 0.0 ,0.0);
		glTranslatef(0.0, 14.0 ,0.0);
		glRotatef(self_ang7+90.0, 0.0, 0.0, -1.0);
		glTranslatef(0.0, -14.0 ,0.0);
		gluSphere(sphere,0.9,50.0,15.0);
		glPopMatrix();

		/*-------Draw the left leg----*/
		glPushMatrix();
		glTranslatef(position[3]-2.0, kneel[1]+jump+3.0, position[4]);
		glRotatef(-self_ang+180.0, 0.0, -1.0, 0.0);
        glTranslatef(0.0, +7.0, 0.0);
		glRotatef(self_ang4 - 90.0, 0.0, 0.0, -1.0);
		glTranslatef(0.0, 0.0, 0.0);
        glTranslatef(0.0, -1.0, 0.0);
		glRotatef(self_ang7+90.0, 0.0, 0.0, 1.0);
		glTranslatef(0.0,1.0 ,0.0);
        glScalef(3.0, 6.0, 3.0);  
		draw_cube();
		glPopMatrix(); 
		
		glPushMatrix();
		glColor3f(1.0, 0.0, 0.0);
		glTranslatef(position[3]-2.0, kneel[1]+jump+3.0, position[4]);
		glRotatef(-self_ang+180.0, 0.0, -1.0, 0.0);
		glTranslatef( 0.0 ,7.0 ,0.0);
		glRotatef(self_ang4 - 90.0, 0.0, 0.0, -1.0);
		glTranslatef( 0.0 , 7.0 ,0.0);
		glTranslatef( 0.0 , -7.0 ,0.0);
		glRotatef(self_ang7+90.0, 0.0, 0.0, 1.0);
		glTranslatef( 0.0, 7.0 ,0.0);
		gluSphere(sphere,1.2,50.0,15.0);
		glPopMatrix();
		
		glPushMatrix();
		glTranslatef(position[3]-2.0, jump-1.75, kneel[0]+position[4]);
		glRotatef(-self_ang+180.0, 0.0, -1.0, 0.0);
		glTranslatef(0.0, +4.75, 0.0);
		glRotatef(self_ang4 -90.0, 0.0, 0.0, 1.0);
        glTranslatef(kneel[0], 0.0, 0.0);
		glTranslatef(0.0, -7.0, 0.0);
		glRotatef(self_ang7+90.0, 0.0, 0.0, 1.0);
		glTranslatef(0.0, 7.0 ,0.0);
		glScalef(2.0, 4.0, 2.0);    
		draw_cube();
		glPopMatrix();  
		
		glPushMatrix();
		glColor3f(1.0, 0.0, 0.0);
		glTranslatef(position[3]-2.0, jump-1.65, position[4]);
		glRotatef(-self_ang+180.0, 0.0, -1.0, 0.0);
		glTranslatef(0.0, 0.0 ,0.0);
		glTranslatef(0.0, 14.0 ,0.0);
		glRotatef(self_ang7+90.0, 0.0, 0.0, 1.0);
		glTranslatef(0.0, -14.0 ,0.0);
		gluSphere(sphere,0.9,50.0,15.0);
		glPopMatrix();


		/*-------Swap the back buffer to the front --------*/
		glutSwapBuffers();
		glFlush();
	}

	/*--------------------------------------------------
	* Reshape callback function which defines the size
	* of the main window when a reshape event occurrs.
	*/
	void my_reshape(int w, int h)
	{
    width = w;
	height = h;

	glViewport(0, 0, w, h);

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	if(w>h)
	glOrtho(-40.0, 40.0, -40.0*(float)h/(float)w, 40.0*(float)h/(float)w, 
				-100.0, 100.0);
	else
	glOrtho(-40.0*(float)w/(float)h, 40.0*(float)w/(float)h, -40.0, 40.0, 
			-100.0, 100.0);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	}

	/*--------------------------------------------------
	* Keyboard callback func. When a 'q' key is pressed,
	* the program is aborted.
	*/
	void my_quit(unsigned char key, int x, int y)
	{
	if(key=='q') exit(0);
	if(key=='w'){ // walk up
		    //printf("x: %f",position[3]);
			//printf(" y: %f\n",position[4]);
		if(position[3] <= 37.5 && position[3] >= -16.5 && position[4] >= -26.5 && position[4] <=-9.5)
		{
			position[3] -= 2*cos(self_ang*PI/180.0);
			position[4] += 2*sin(self_ang*PI/180.0);
		}else if(position[3] >= ball_position[1] -1.0 && position[3] <= ball_position[0] +1.2 && position[4] >= ball_position[2] -1.0 && position[4] <= ball_position[3] +0.8)
 		{   //踢球左面
			position[0] += 2*cos(self_ang*PI/180.0);
			ball_position[0] += 2*cos(self_ang*PI/180.0);
			ball_position[1] += 2*cos(self_ang*PI/180.0);
			position[3] -= 2*cos(self_ang*PI/180.0);
			position[4] += 2*sin(self_ang*PI/180.0);
		}else if(position[3] >= ball_position[0]+13.9 && position[3] <= ball_position[1]+12.7 && position[4] >= ball_position[2] -0.5 && position[4] <= ball_position[3] +2.3)
		{
			//踢球右面
			position[0] += 2*cos(self_ang*PI/180.0);
			ball_position[0] += 2*cos(self_ang*PI/180.0);
			ball_position[1] += 2*cos(self_ang*PI/180.0);
			position[3] -= 2*cos(self_ang*PI/180.0);
			position[4] += 2*sin(self_ang*PI/180.0);
		}else if(position[3] >= ball_position[0] +1.2 && position[3] <= ball_position[1]+11.9 && position[4] >= ball_position[2] -1.0 && position[4] <= ball_position[3] -3.5)
		{
			//踢球後面
			position[3] -= 2*cos(self_ang*PI/180.0);
			position[4] += 2*sin(self_ang*PI/180.0);
		}else if(position[3] >= ball_position[0]+1.0 && position[3] <= ball_position[1]+12.7 && position[4] >= ball_position[2] +3.8 && position[4] <= ball_position[3] +2.3)
		{
			//踢球前面
			position[3] -= 2*cos(self_ang*PI/180.0);
			position[4] += 2*sin(self_ang*PI/180.0);
		}
		else{
			position[3] += Step*cos(self_ang*PI/180.0);
			position[4] -= Step*sin(self_ang*PI/180.0);
	    }
		if(transfer == 1)
		{
			setup_light();
		}else{
		lt_pos[0] = position[3]; lt_pos[1] = 60.0; lt_pos[2] = position[4]; lt_pos[3] = 1.0;
	    setup_light();
		}
	}else if(key=='s'){ // walk down
		if(position[3] <= 39.4 && position[3] >= -17.9 && position[4] >= -26.4 && position[4] <=-9.5 )
		{
			position[3] += 2*cos(self_ang*PI/180.0);
			position[4] -= 2*sin(self_ang*PI/180.0);
		}else if(position[3] >= ball_position[1] -1.0 && position[3] <= ball_position[0] +1.2 && position[4] >= ball_position[2] -1.0 && position[4] <= ball_position[3] +0.8)
 		{   //踢球左面
			position[0] -= 2*cos(self_ang*PI/180.0);
			ball_position[0] -= 2*cos(self_ang*PI/180.0);
			ball_position[1] -= 2*cos(self_ang*PI/180.0);
			position[3] += 2*cos(self_ang*PI/180.0);
			position[4] -= 2*sin(self_ang*PI/180.0);
		}else if(position[3] >= ball_position[0]+13.9 && position[3] <= ball_position[1]+12.7 && position[4] >= ball_position[2] -0.5 && position[4] <= ball_position[3] +2.3)
		{
			//踢球右面
			position[0] -= 2*cos(self_ang*PI/180.0);
			ball_position[0] -= 2*cos(self_ang*PI/180.0);
			ball_position[1] -= 2*cos(self_ang*PI/180.0);
			position[3] += 2*cos(self_ang*PI/180.0);
			position[4] -= 2*sin(self_ang*PI/180.0);
		}else if(position[3] >= ball_position[0] +1.2 && position[3] <= ball_position[1]+11.9 && position[4] >= ball_position[2] -1.0 && position[4] <= ball_position[3] -3.5)
		{
			//踢球後面
			position[3] += 2*cos(self_ang*PI/180.0);
			position[4] -= 2*sin(self_ang*PI/180.0);
		}else if(position[3] >= ball_position[0]+1.0 && position[3] <= ball_position[1]+12.7 && position[4] >= ball_position[2] +3.8 && position[4] <= ball_position[3] +2.3)
		{
			//踢球前面
			position[3] += 2*cos(self_ang*PI/180.0);
			position[4] -= 2*sin(self_ang*PI/180.0);
		}else{
			position[3] -= Step*cos(self_ang*PI/180.0);
			position[4] += Step*sin(self_ang*PI/180.0);
		}
		if(transfer == 1)
		{
			setup_light();
		}else{
		lt_pos[0] = position[3]; lt_pos[1] = 60.0; lt_pos[2] = position[4]; lt_pos[3] = 1.0;
	    setup_light();
		}
	}else if(key=='d'){ //turn right
		self_ang += 10.0;
		if(transfer == 1)
		{
			setup_light();
		}else{
		lt_pos[0] = position[3]; lt_pos[1] = 60.0; lt_pos[2] = position[4]; lt_pos[3] = 1.0;
	    setup_light();
		}
	}else if(key=='a'){ // turn left
		self_ang -= 10.0;
		if(transfer == 1)
		{
			setup_light();
		}else{
		lt_pos[0] = position[3]; lt_pos[1] = 60.0; lt_pos[2] = position[4]; lt_pos[3] = 1.0;
	    setup_light();
		}
	}else if(key=='x'){ //swing up
		self_ang2 -= 10.0;
		/*(	self_ang2 >= 90)
		{
			self_ang2 = 90;
		}else if(self_ang2 <= -180){
			self_ang2 = -180;
		}
		*/
	}else if(key=='z'){ //swing down
		self_ang2 += 10.0;
		/*if(	self_ang2 >= 90)
		{
			self_ang2 = 90;
		}else if(self_ang2 <= -180){
			self_ang2 = -180;
		}
		*/
	}else if(key=='r') //jump up
	{
		Timer(0);
	}else if(key=='t') //kneel down
	{
		Timer3(1);
	}else if(key=='c')
	{
		self_ang3 += 10.0;
		if(	self_ang3 >= 70)
		{
			self_ang3 = 70;
		}
	}else if(key=='v')
	{
		self_ang3 -= 10.0;
		if(	self_ang3 <= -180)
		{
			self_ang3 = -180;
		}
	}else if(key=='b')
	{
		self_ang5 -= 10.0;
		if(	self_ang5 <= -240)
		{
			self_ang5 = -240;
		}
	}else if(key=='n')
	{
		self_ang5 += 10.0;
		if(	self_ang5 >= 0)
		{
			self_ang5 = 0;
		}
	}else if(key=='f')
	{
		self_ang2 = -70;
		self_ang3 = 20;
		self_ang5 = -200;
		Timer5(0);
	}else if(key=='g')
	{
		self_ang8 += 10.0;
		if(self_ang8 >= -50.0)
		{
			self_ang8 = -50.0;
		}
	}else if(key=='h')
	{
		self_ang8 -= 10.0;
		if(self_ang8 <= -110.0)
		{
			self_ang8 = -110.0;
		}
	}else if(key=='j')
	{
		self_ang6 += 10.0;
		if(self_ang6 >= 60.0)
		{
			self_ang6 = 60.0;
		}
	}else if(key=='k')
	{
		self_ang6 -= 10.0;
		if(self_ang6 <= -100.0)
		{
			self_ang6 = -100.0;
		}
	}else if(key=='y')
	{
		self_ang10 -= 10.0;
		if(self_ang10 <= -120.0)
		{
			self_ang10 = -120.0;
		}
	}else if(key=='u')
	{
		self_ang10 += 10.0;
		if(self_ang10 >= -60.0)
		{
			self_ang10 = -60.0;
		}
	}else if(key=='p')
	{
		self_ang = -90.0;
		self_ang2 = -90.0;
		self_ang3 = -90.0;
		self_ang4 = -90.0;
		self_ang5 = -90.0;
		self_ang6 = -90.0;
		self_ang7 = -90.0;
		self_ang8 = -90.0;
		self_ang9 = -90.0;
		self_ang10 = -90.0;
	}

	// light //
    else if(key=='1'){
	  glEnable(GL_LIGHTING);
	  glShadeModel(GL_SMOOTH);
   }else if(key=='2'){
	  glDisable(GL_LIGHTING);
	  glDisable(GL_LIGHT0);
	  glDisable(GL_NORMALIZE);
      glDisable(GL_COLOR_MATERIAL);
	  setup_light2();
   }
   else if(key=='3'){
	  glEnable(GL_LIGHTING);
	  glShadeModel(GL_FLAT);
   }else if(key=='R'){
    lt_diffuse[0]= 0.95; lt_diffuse[1]= 0.05; lt_diffuse[2]= 0.05; 
    setup_light();
  }else if(key=='G'){
    lt_diffuse[0]= 0.05; lt_diffuse[1]= 0.95; lt_diffuse[2]= 0.05; 
    setup_light();
  }else if(key=='B'){
    lt_diffuse[0]= 0.05; lt_diffuse[1]= 0.05; lt_diffuse[2]= 0.95; 
    setup_light();
  }else if(key=='W'){
    lt_diffuse[0]= 0.95; lt_diffuse[1]= 0.95; lt_diffuse[2]= 0.95; 
    setup_light();
  }else if(key == 'Q') //Point light
  {
	  transfer = 1;
	  angle = 0.0;
	  angle2 = 0.0;
	  lt_pos[0] = 12.0; lt_pos[1] = 25.0; lt_pos[2] = 20.0; lt_pos[3] = 1.0;
	  setup_light();
  }else if(key == 'A') //direction light X
  {
	  transfer = 2;
	  lt_pos[0] = -1.0; lt_pos[1] = 0.0; lt_pos[2] = 0.0; lt_pos[3] = 0.0;
	  exponent = 0.0;
	  angle = 90.0;
	  setup_light2();
  }else if(key == 'S') //direction light X
  {
	  transfer = 2;
	  lt_pos[0] = 1.0; lt_pos[1] = 0.0; lt_pos[2] = 0.0; lt_pos[3] = 0.0;
	  exponent = 0.0;
	  angle = 0.0;
	  setup_light2();
  }else if(key == 'D') //direction light Y
  {
	  transfer = 2;
	  lt_pos[0] = 0.0; lt_pos[1] = 1.0; lt_pos[2] = 0.0; lt_pos[3] = 0.0;
	  exponent = 0.0;
	  angle = 90.0;
	  setup_light2();
  }else if(key == 'F') //direction light Y
  {
	  transfer = 2;
	  lt_pos[0] = 0.0; lt_pos[1] = 1.0; lt_pos[2] = 0.0; lt_pos[3] = 0.0;
	  exponent = 0.0;
	  angle = 0.0;
	  setup_light2();
  }else if(key == 'H') //direction light Z
  {
	  transfer = 2;
	  lt_pos[0] = 0.0; lt_pos[1] = 0.0; lt_pos[2] = 1.0; lt_pos[3] = 0.0;
	  exponent = 0.0;
	  angle = 90.0;
	  setup_light2();
  }else if(key == 'J') //direction light Z
  {
	  transfer = 2;
	  lt_pos[0] = 0.0; lt_pos[1] = 0.0; lt_pos[2] = 1.0; lt_pos[3] = 0.0;
	  exponent = 0.0;
	  angle = 0.0;
	  setup_light2();
  }else if(key == '8') // spot light
  {
	  transfer = 3;
	  spot_pos[2] += 10.0;
	  pos_sphere[1] += 10.0;
	  lt_pos[0] = position[3] + spot_pos[0]; lt_pos[1] = 35.0 + spot_pos[1]; lt_pos[2] = position[4] + spot_pos[2]; lt_pos[3] = 1.0;
      spot_dir[0] = 0.0; spot_dir[1] = -1.0; spot_dir[2] = 0.0;
	  setup_light();
  }else if(key == 'I') // spot light
  {
	  transfer = 3;
	  spot_pos[2] -= 10.0;
	   pos_sphere[1] -= 10.0;
	  lt_pos[0] = position[3] + spot_pos[0]; lt_pos[1] = 35.0 + spot_pos[1]; lt_pos[2] = position[4] + spot_pos[2]; lt_pos[3] = 1.0;
      spot_dir[0] = 0.0; spot_dir[1] = -1.0; spot_dir[2] = 0.0;
	  setup_light();
  }else if(key == 'U') // spot light
  {
	  transfer = 3;
	  spot_pos[0] -= 10.0;
	   pos_sphere[0] -= 10.0;
	  lt_pos[0] = position[3] + spot_pos[0]; lt_pos[1] = 35.0 + spot_pos[1]; lt_pos[2] = position[4] + spot_pos[2]; lt_pos[3] = 1.0;
      spot_dir[0] = 0.0; spot_dir[1] = -1.0; spot_dir[2] = 0.0;
	  setup_light();
  }else if(key == 'O') // spot light
  {
	  transfer = 3;
	  spot_pos[0] += 10.0;
	   pos_sphere[0] += 10.0;
	  lt_pos[0] = position[3] + spot_pos[0]; lt_pos[1] = 35.0 + spot_pos[1]; lt_pos[2] = position[4] + spot_pos[2]; lt_pos[3] = 1.0;
      spot_dir[0] = 0.0; spot_dir[1] = -1.0; spot_dir[2] = 0.0;
	  setup_light();
  }else if(key == 'K') // spot light
  {
	  transfer = 3;
	  spot_pos[2] += 10.0;
	  lt_pos[0] = 10.0 + spot_pos[0]; lt_pos[1] = 35.0 + spot_pos[1]; lt_pos[2] = 15.0 + spot_pos[2]; lt_pos[3] = 1.0;
      spot_dir[0] = 0.0; spot_dir[1] = -1.0; spot_dir[2] = 0.0;
	  setup_light2();
  }else if(key == 'L') // spot light
  {
	  transfer = 3;
	  spot_pos[2] -= 10.0;
	  lt_pos[0] = 10.0 + spot_pos[0]; lt_pos[1] = 35.0 + spot_pos[1]; lt_pos[2] = 15.0 + spot_pos[2]; lt_pos[3] = 1.0;
      spot_dir[0] = 0.0; spot_dir[1] = -1.0; spot_dir[2] = 0.0;
	  setup_light2();
  }else if(key == 'Z') // spot light
  {
	  transfer = 3;
	  lt_pos[0] = position[3] + pos_sphere[0]; lt_pos[1] = 35.0; lt_pos[2] = position[4] + pos_sphere[1]; lt_pos[3] = 1.0;
      spot_dir[0] = 0.0; spot_dir[1] = -1.0; spot_dir[2] = 0.0;
	  angle2 += 10.0;
	  if(angle2 >= 90.0)
	  {
		  angle2 = 90.0;
	  }
	  setup_light();
  }else if(key == 'X')
  {
	  transfer = 3;
	  lt_pos[0] = position[3] + pos_sphere[0]; lt_pos[1] = 35.0; lt_pos[2] = position[4] + pos_sphere[1]; lt_pos[3] = 1.0;
      spot_dir[0] = 0.0; spot_dir[1] = -1.0; spot_dir[2] = 0.0;
	  angle2 -= 10.0;
	  if(angle2 <= 0.0)
	  {
		  angle2 = 0.0;
	  }
	  setup_light();
  }else if(key == 'C')
  {
	  transfer = 3;
	  lt_pos[0] = position[3] + pos_sphere[0]; lt_pos[1] = 35.0; lt_pos[2] = position[4] + pos_sphere[1]; lt_pos[3] = 1.0;
      spot_dir[0] = -1.0; spot_dir[1] = 0.0; spot_dir[2] = 0.0;
	  angle2 += 10.0;
	  if(angle2 >= 90.0)
	  {
		  angle2 = 90.0;
	  }
	  setup_light();
  }else if(key == 'V')
  {
	  transfer = 3;
	  lt_pos[0] = position[3] + pos_sphere[0]; lt_pos[1] = 35.0; lt_pos[2] = position[4] + pos_sphere[1]; lt_pos[3] = 1.0;
      spot_dir[0] = -1.0; spot_dir[1] = 0.0; spot_dir[2] = 0.0;
	  angle2 -= 10.0;
	  if(angle2 <= 0.0)
	  {
		  angle2 = 0.0;
	  }
	  setup_light();
  }else if(key == 'N')
  {
	  transfer = 3;
	  lt_pos[0] = position[3] + pos_sphere[0]; lt_pos[1] = 35.0; lt_pos[2] = position[4] + pos_sphere[1]; lt_pos[3] = 1.0;
      spot_dir[0] = 0.0; spot_dir[1] = 0.0; spot_dir[2] = -1.0;
	  angle2 += 10.0;
	  if(angle2 >= 90.0)
	  {
		  angle2 = 90.0;
	  }
	  setup_light();
  }else if(key == 'M')
  {
	  transfer = 3;
	  lt_pos[0] = position[3] + pos_sphere[0]; lt_pos[1] = 35.0; lt_pos[2] = position[4] + pos_sphere[1]; lt_pos[3] = 1.0;
      spot_dir[0] = 0.0; spot_dir[1] = 0.0; spot_dir[2] = -1.0;
	  angle2 -= 10.0;
	  if(angle2 <= 0.0)
	  {
		  angle2 = 0.0;
	  }
	  setup_light();
  }else if(key == ',')
  {
	  transfer = 3;
	  exponent += 10;
	  if(exponent >= 130)
	  {
		  exponent = 128;
	  }
	  setup_light2();
  }else if(key == '.')
  {
	  transfer = 3;
	  exponent -= 10;
	  if(exponent <= 0)
	  {
		  exponent = 0;
	  }
	  setup_light2();
  }else if(key == '4')
  {
	  Epitch +=10.0;
  }else if(key == '5')
  {
	  head +=10.0;
  }else if(key == '6')
  {
	  roll += 10.0;
  }else if(key == '9')
  {
	  R -= 0.1;
	  if(R <= 0.0)
	  {
		  R = 0.0;
	  }
  }else if(key == '0')
  {
	  G -= 0.1;
	  if(G <= 0.0)
	  {
		  G = 0.0;
	  }
  }else if(key == '-')
  {
	  B -= 0.1;
	  if(B <= 0.0)
	  {
		  B = 0.0;
	  }
  }else if(key == 'P')
  {
	  R2 -= 0.1;
	  if(R2 <= 0.0)
	  {
		  R2 = 0.0;
	  }
  }else if(key == '[')
  {
	  G2 -= 0.1;
	  if(G <= 0.0)
	  {
		  G2 = 0.0;
	  }
  }else if(key == ']')
  {
	  B2 -= 0.1;
	  if(B2 <= 0.0)
	  {
		  B2 = 0.0;
	  }
  }else if(key == '7')
  {
	  mat_shininess += 8.0;
  }else if(key == '=')
  {
	  R = 1.0; G = 1.0; B = 1.0; R2 = 1.0; G2 = 1.0; B2 = 1.0; mat_shininess = 1.0;
  }
	display();
	}

	

	/*---------------------------------------------------
	* Main procedure which defines the graphics environment,
	* the operation style, and the callback func's.
	*/
	void main(int argc, char **argv)
	{
	/*-----Initialize the GLUT environment-------*/
	glutInit(&argc, argv);

	/*-----Depth buffer is used, be careful !!!----*/
	glutInitDisplayMode(GLUT_DOUBLE| GLUT_RGB| GLUT_DEPTH);
	glutInitWindowSize(1024, 768);
	glutInitWindowSize(width, height);
	glutCreateWindow("shading");

	myinit();      /*---Initialize other state varibales----*/
  
	/*----Associate callback func's whith events------*/
	glutDisplayFunc(display);
	/*  glutIdleFunc(display); */
	glutReshapeFunc(my_reshape);
	glutKeyboardFunc(my_quit);
	glutMouseFunc(mouse);

	glutMainLoop();
	}

